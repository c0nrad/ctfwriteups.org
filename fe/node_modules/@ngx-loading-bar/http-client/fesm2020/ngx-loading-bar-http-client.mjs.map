{"version":3,"file":"ngx-loading-bar-http-client.mjs","sources":["../../../../packages/http-client/src/loading-bar.interceptor.ts","../../../../packages/http-client/src/http.module.ts","../../../../packages/http-client/src/ngx-loading-bar-http-client.ts"],"sourcesContent":["import { LoadingBarService } from '@ngx-loading-bar/core';\nimport { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpContextToken } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize, tap } from 'rxjs/operators';\n\nexport const NGX_LOADING_BAR_IGNORED = new HttpContextToken<boolean>(() => false);\ndeclare const ngDevMode: boolean;\n\n@Injectable()\nexport class LoadingBarInterceptor implements HttpInterceptor {\n  constructor(private loader: LoadingBarService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // https://github.com/angular/angular/issues/18155\n    if (req.headers.has('ignoreLoadingBar')) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(\n          `Using http headers ('ignoreLoadingBar') to ignore loading bar is deprecated. Use HttpContext instead: 'context: new HttpContext().set(NGX_LOADING_BAR_IGNORED, true)'`,\n        );\n      }\n\n      return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));\n    }\n    if (req.context.get(NGX_LOADING_BAR_IGNORED) === true) {\n      return next.handle(req);\n    }\n\n    let started = false;\n    const ref = this.loader.useRef('http');\n    return next.handle(req).pipe(\n      tap(() => {\n        if (!started) {\n          ref.start();\n          started = true;\n        }\n      }),\n      finalize(() => started && ref.complete()),\n    );\n  }\n}\n","import { LoadingBarModule } from '@ngx-loading-bar/core';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { LoadingBarInterceptor } from './loading-bar.interceptor';\n\n@NgModule({\n  imports: [HttpClientModule, LoadingBarModule],\n  exports: [HttpClientModule, LoadingBarModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: LoadingBarInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class LoadingBarHttpClientModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;MAMa,uBAAuB,GAAG,IAAI,gBAAgB,CAAU,MAAM,KAAK,EAAE;MAIrE,qBAAqB;IAChC,YAAoB,MAAyB;QAAzB,WAAM,GAAN,MAAM,CAAmB;KAAI;IAEjD,SAAS,CAAC,GAAqB,EAAE,IAAiB;;QAEhD,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;YACvC,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,EAAE;gBACjD,OAAO,CAAC,IAAI,CACV,uKAAuK,CACxK,CAAC;aACH;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;SACpF;QACD,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,KAAK,IAAI,EAAE;YACrD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC1B,GAAG,CAAC;YACF,IAAI,CAAC,OAAO,EAAE;gBACZ,GAAG,CAAC,KAAK,EAAE,CAAC;gBACZ,OAAO,GAAG,IAAI,CAAC;aAChB;SACF,CAAC,EACF,QAAQ,CAAC,MAAM,OAAO,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC,CAC1C,CAAC;KACH;;kHA7BU,qBAAqB;sHAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU;;;MCOE,0BAA0B;;uHAA1B,0BAA0B;wHAA1B,0BAA0B,YAV3B,gBAAgB,EAAE,gBAAgB,aAClC,gBAAgB,EAAE,gBAAgB;wHASjC,0BAA0B,aAR1B;QACT;YACE,OAAO,EAAE,iBAAiB;YAC1B,QAAQ,EAAE,qBAAqB;YAC/B,KAAK,EAAE,IAAI;SACZ;KACF,YARQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EACnC,gBAAgB,EAAE,gBAAgB;2FASjC,0BAA0B;kBAXtC,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;oBAC7C,OAAO,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;oBAC7C,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,iBAAiB;4BAC1B,QAAQ,EAAE,qBAAqB;4BAC/B,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF;;;ACfD;;;;;;"}