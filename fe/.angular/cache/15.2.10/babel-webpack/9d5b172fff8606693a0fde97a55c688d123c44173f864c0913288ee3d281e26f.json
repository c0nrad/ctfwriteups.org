{"ast":null,"code":"import * as i1 from '@ngx-loading-bar/core';\nimport { LoadingBarModule } from '@ngx-loading-bar/core';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { HttpContextToken, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { tap, finalize } from 'rxjs/operators';\nconst NGX_LOADING_BAR_IGNORED = new HttpContextToken(() => false);\nlet LoadingBarInterceptor = /*#__PURE__*/(() => {\n  class LoadingBarInterceptor {\n    constructor(loader) {\n      this.loader = loader;\n    }\n    intercept(req, next) {\n      // https://github.com/angular/angular/issues/18155\n      if (req.headers.has('ignoreLoadingBar')) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          console.warn(`Using http headers ('ignoreLoadingBar') to ignore loading bar is deprecated. Use HttpContext instead: 'context: new HttpContext().set(NGX_LOADING_BAR_IGNORED, true)'`);\n        }\n        return next.handle(req.clone({\n          headers: req.headers.delete('ignoreLoadingBar')\n        }));\n      }\n      if (req.context.get(NGX_LOADING_BAR_IGNORED) === true) {\n        return next.handle(req);\n      }\n      let started = false;\n      const ref = this.loader.useRef('http');\n      return next.handle(req).pipe(tap(() => {\n        if (!started) {\n          ref.start();\n          started = true;\n        }\n      }), finalize(() => started && ref.complete()));\n    }\n  }\n  LoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) {\n    return new (t || LoadingBarInterceptor)(i0.ɵɵinject(i1.LoadingBarService));\n  };\n  LoadingBarInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LoadingBarInterceptor,\n    factory: LoadingBarInterceptor.ɵfac\n  });\n  return LoadingBarInterceptor;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LoadingBarHttpClientModule = /*#__PURE__*/(() => {\n  class LoadingBarHttpClientModule {}\n  LoadingBarHttpClientModule.ɵfac = function LoadingBarHttpClientModule_Factory(t) {\n    return new (t || LoadingBarHttpClientModule)();\n  };\n  LoadingBarHttpClientModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LoadingBarHttpClientModule\n  });\n  LoadingBarHttpClientModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: LoadingBarInterceptor,\n      multi: true\n    }],\n    imports: [[HttpClientModule, LoadingBarModule], HttpClientModule, LoadingBarModule]\n  });\n  return LoadingBarHttpClientModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LoadingBarHttpClientModule, NGX_LOADING_BAR_IGNORED };\n//# sourceMappingURL=ngx-loading-bar-http-client.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}