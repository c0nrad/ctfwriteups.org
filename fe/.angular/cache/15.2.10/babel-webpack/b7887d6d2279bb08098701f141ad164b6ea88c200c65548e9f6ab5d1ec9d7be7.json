{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nlet TopComponent = class TopComponent {\n  constructor(writeupService, location, voteService, commentService, userService) {\n    this.writeupService = writeupService;\n    this.location = location;\n    this.voteService = voteService;\n    this.commentService = commentService;\n    this.userService = userService;\n    this.me = {};\n    this.writeups = [];\n    this.votes = [];\n    this.sortBy = \"votes\";\n    this.durationFilter = \"week\";\n    this.categoryFilter = \"\";\n    this.categories = [];\n  }\n  ngOnInit() {\n    this.writeupService.getWriteups().subscribe(writeups => {\n      this.writeups = writeups || [];\n      this.writeups.forEach(writeup => {\n        writeup.newComment = {};\n        writeup.newComment.body = \"\";\n        writeup.isExpanded = false;\n        writeup.comments = writeup.comments || [];\n        this.categories.push(writeup.challengeCategory);\n      });\n      this.categories = this.categories.filter((v, i, a) => a.indexOf(v) === i);\n    });\n    this.voteService.getVotes().subscribe(votes => {\n      this.votes = votes || [];\n    });\n    this.userService.getMe().subscribe(me => {\n      this.me = me;\n    });\n  }\n  hasVoted(writeup) {\n    if (!this.votes) {}\n    return !!this.votes.find(v => v.writeupID === writeup.id);\n  }\n  getVote(writeup) {\n    return this.votes.find(v => v.writeupID === writeup.id);\n  }\n  addVote(writeup) {\n    const vote = {\n      writeupID: writeup.id,\n      userID: this.me.id\n    };\n    this.voteService.newVote(vote).subscribe(v => {\n      this.votes.push(v);\n      writeup.voteCount++;\n    });\n  }\n  removeVote(vote, writeup) {\n    console.log(\"remove vote\", vote);\n    this.voteService.deleteVote(vote).subscribe(_ => {\n      this.votes = this.votes.filter(v => vote.id !== v.id);\n      writeup.voteCount--;\n    });\n  }\n  getDomain(u) {\n    return new URL(u).hostname;\n  }\n  filteredWriteups() {\n    let writeups = this.writeups;\n    if (this.categoryFilter) {\n      writeups = writeups.filter(w => w.challengeCategory === this.categoryFilter);\n    }\n    if (this.durationFilter === \"day\") {\n      writeups = writeups.filter(w => w.ctfEndDate * 1000 > Date.now() - 1000 * 60 * 60 * 24);\n    } else if (this.durationFilter === \"week\" || this.durationFilter === \"\") {\n      writeups = writeups.filter(w => w.ctfEndDate * 1000 > Date.now() - 1000 * 60 * 60 * 24 * 7);\n    } else if (this.durationFilter === \"month\") {\n      writeups = writeups.filter(w => w.ctfEndDate * 1000 > Date.now() - 1000 * 60 * 60 * 24 * 30);\n    }\n    if (this.sortBy === \"votes\" || this.sortBy == \"\") {\n      writeups = writeups.sort((a, b) => b.voteCount - a.voteCount);\n    } else if (this.sortBy == \"newest\") {\n      writeups = writeups.sort((a, b) => b.ts - a.ts);\n    } else if (this.sortBy == \"comments\") {\n      writeups = writeups.sort((a, b) => b.commentCount - a.commentCount);\n    }\n    return writeups;\n  }\n  toggleWriteup(writeup) {\n    writeup.isExpanded = !writeup.isExpanded;\n    if (writeup.isExpanded) {\n      this.commentService.getCommentsForWriteup(writeup.id).subscribe(comments => {\n        writeup.comments = comments;\n      });\n    }\n  }\n  addComment(writeup) {\n    writeup.newComment.writeupID = writeup.id;\n    writeup.newComment.userID = this.me.id;\n    this.commentService.newComment(writeup.newComment).subscribe(comment => {\n      writeup.comments.push(comment);\n      writeup.commentCount++;\n      writeup.newComment.body = \"\";\n    });\n  }\n};\nTopComponent = __decorate([Component({\n  selector: \"app-top\",\n  template: ` <div style=\"padding-top: 65px\" class=\"container\">\n    <div class=\"input-group mb-3\">\n      <select class=\"form-select\" [(ngModel)]=\"sortBy\">\n        <option value=\"votes\">Votes</option>\n        <option value=\"newest\">Newest</option>\n        <option value=\"comments\">Comments</option>\n      </select>\n\n      <select class=\"form-select\" [(ngModel)]=\"categoryFilter\">\n        <option value=\"\">All Categories</option>\n        <option *ngFor=\"let category of categories\" [value]=\"category\">{{ category }}</option>\n      </select>\n\n      <select class=\"form-select float-end\" [(ngModel)]=\"durationFilter\">\n        <option value=\"day\">Day</option>\n        <option value=\"week\">Week</option>\n        <option value=\"month\">Month</option>\n        <option value=\"all\">All Time</option>\n      </select>\n    </div>\n\n    <div class=\"clearfix\"></div>\n    <div *ngFor=\"let writeup of filteredWriteups()\" class=\"card\">\n      <div class=\"card-body py-1\">\n        <div class=\"row\">\n          <div class=\"col-1\">\n            <i *ngIf=\"!hasVoted(writeup)\" (click)=\"addVote(writeup)\" class=\"bi bi-heart\" style=\"font-size:1.2rem;  vertical-align: 0em;\"></i>\n            <i *ngIf=\"hasVoted(writeup)\" (click)=\"removeVote(getVote(writeup)!, writeup)\" class=\"bi bi-heart-fill text-danger\" style=\"font-size: 1.2rem\"></i>\n\n            {{ writeup.voteCount }}\n          </div>\n\n          <div class=\"col-11\">\n            <div class=\"row pb-0\">\n              <div class=\"col-2\">\n                <a [routerLink]=\"['/ctfs', writeup.ctfID, 'edit']\"> {{ writeup.ctfName }}</a>\n              </div>\n\n              <div class=\"col-9\">\n                \n                  {{ writeup.challengeCategory }} / {{ writeup.challengeName }} <span style=\"padding-left: 5px\">(<a href=\"{{writeup.url}}\" rel=\"noopener noreferrer\" target=\"_blank\">{{ writeup.url }}</a>)</span></a\n                >\n              </div>\n\n              <div class=\"col-1\" (click)=\"toggleWriteup(writeup)\"><i class=\"bi bi-chat me-1\"></i>{{ writeup.commentCount || 0 }}</div>\n            </div>\n            <div class=\"row pb-0\">\n              <div class=\"col-2\">\n                <!-- <p>{{ writeup.body }}</p> -->\n                <p>{{ writeup.ts | dateAgo }}</p>\n              </div>\n              <div class=\"col-10\">\n                <span *ngFor=\"let tag of writeup.tags\" class=\"badge bg-secondary me-1\">{{ tag }}</span>\n                <i *ngIf=\"me.isAdmin || writeup.submitterID == me.id\" class=\"bi bi-pencil text-muted\" [routerLink]=\"['/writeups', writeup.id, 'edit']\"></i>\n              </div>\n            </div>\n\n            <div *ngIf=\"writeup.isExpanded\">\n              <div *ngFor=\"let comment of writeup.comments\">\n                <hr />\n                <p class=\"text-muted\">{{ comment.username || \"Anonymous\" }} - {{ comment.ts | dateAgo }}</p>\n                <p>{{ comment.body }}</p>\n              </div>\n\n              <div *ngIf=\"me.id\">\n                <textarea [(ngModel)]=\"writeup.newComment.body\" class=\"form-control\"></textarea>\n                <button (click)=\"addComment(writeup)\" class=\"btn btn-primary\">Add Comment</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>`,\n  styles: []\n})], TopComponent);\nexport { TopComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,QAAQ,eAAe;AAoFlC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAWvBC,YAAoBC,cAA8B,EAAUC,QAAkB,EAAUC,WAAwB,EAAUC,cAA8B,EAAUC,WAAwB;IAAtK,mBAAc,GAAdJ,cAAc;IAA0B,aAAQ,GAARC,QAAQ;IAAoB,gBAAW,GAAXC,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IAA0B,gBAAW,GAAXC,WAAW;IAV7K,OAAE,GAAS,EAAU;IACrB,aAAQ,GAAc,EAAE;IACxB,UAAK,GAAW,EAAE;IAElB,WAAM,GAAG,OAAO;IAChB,mBAAc,GAAG,MAAM;IACvB,mBAAc,GAAG,EAAE;IAEnB,eAAU,GAAa,EAAE;EAEoK;EAE7LC,QAAQ;IACN,IAAI,CAACL,cAAc,CAACM,WAAW,EAAE,CAACC,SAAS,CAAEC,QAAQ,IAAI;MACvD,IAAI,CAACA,QAAQ,GAAGA,QAAQ,IAAI,EAAE;MAE9B,IAAI,CAACA,QAAQ,CAACC,OAAO,CAAEC,OAAO,IAAI;QAChCA,OAAO,CAACC,UAAU,GAAG,EAAa;QAClCD,OAAO,CAACC,UAAU,CAACC,IAAI,GAAG,EAAE;QAC5BF,OAAO,CAACG,UAAU,GAAG,KAAK;QAC1BH,OAAO,CAACI,QAAQ,GAAGJ,OAAO,CAACI,QAAQ,IAAI,EAAE;QAEzC,IAAI,CAACC,UAAU,CAACC,IAAI,CAACN,OAAO,CAACO,iBAAiB,CAAC;MACjD,CAAC,CAAC;MAEF,IAAI,CAACF,UAAU,GAAG,IAAI,CAACA,UAAU,CAACG,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAACH,CAAC,CAAC,KAAKC,CAAC,CAAC;IAC3E,CAAC,CAAC;IAEF,IAAI,CAAClB,WAAW,CAACqB,QAAQ,EAAE,CAAChB,SAAS,CAAEiB,KAAK,IAAI;MAC9C,IAAI,CAACA,KAAK,GAAGA,KAAK,IAAI,EAAE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACpB,WAAW,CAACqB,KAAK,EAAE,CAAClB,SAAS,CAAEmB,EAAE,IAAI;MACxC,IAAI,CAACA,EAAE,GAAGA,EAAE;IACd,CAAC,CAAC;EACJ;EAEAC,QAAQ,CAACjB,OAAgB;IACvB,IAAI,CAAC,IAAI,CAACc,KAAK,EAAE;IAEjB,OAAO,CAAC,CAAC,IAAI,CAACA,KAAK,CAACI,IAAI,CAAET,CAAC,IAAKA,CAAC,CAACU,SAAS,KAAKnB,OAAO,CAACoB,EAAE,CAAC;EAC7D;EAEAC,OAAO,CAACrB,OAAgB;IACtB,OAAO,IAAI,CAACc,KAAK,CAACI,IAAI,CAAET,CAAC,IAAKA,CAAC,CAACU,SAAS,KAAKnB,OAAO,CAACoB,EAAE,CAAC;EAC3D;EAEAE,OAAO,CAACtB,OAAgB;IACtB,MAAMuB,IAAI,GAAS;MACjBJ,SAAS,EAAEnB,OAAO,CAACoB,EAAE;MACrBI,MAAM,EAAE,IAAI,CAACR,EAAE,CAACI;KACT;IAET,IAAI,CAAC5B,WAAW,CAACiC,OAAO,CAACF,IAAI,CAAC,CAAC1B,SAAS,CAAEY,CAAC,IAAI;MAC7C,IAAI,CAACK,KAAK,CAACR,IAAI,CAACG,CAAC,CAAC;MAClBT,OAAO,CAAC0B,SAAS,EAAE;IACrB,CAAC,CAAC;EACJ;EAEAC,UAAU,CAACJ,IAAU,EAAEvB,OAAgB;IACrC4B,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEN,IAAI,CAAC;IAChC,IAAI,CAAC/B,WAAW,CAACsC,UAAU,CAACP,IAAI,CAAC,CAAC1B,SAAS,CAAEkC,CAAC,IAAI;MAChD,IAAI,CAACjB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACN,MAAM,CAAEC,CAAC,IAAKc,IAAI,CAACH,EAAE,KAAKX,CAAC,CAACW,EAAE,CAAC;MACvDpB,OAAO,CAAC0B,SAAS,EAAE;IACrB,CAAC,CAAC;EACJ;EAEAM,SAAS,CAACC,CAAS;IACjB,OAAO,IAAIC,GAAG,CAACD,CAAC,CAAC,CAACE,QAAQ;EAC5B;EAEAC,gBAAgB;IACd,IAAItC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC5B,IAAI,IAAI,CAACuC,cAAc,EAAE;MACvBvC,QAAQ,GAAGA,QAAQ,CAACU,MAAM,CAAE8B,CAAC,IAAKA,CAAC,CAAC/B,iBAAiB,KAAK,IAAI,CAAC8B,cAAc,CAAC;;IAGhF,IAAI,IAAI,CAACE,cAAc,KAAK,KAAK,EAAE;MACjCzC,QAAQ,GAAGA,QAAQ,CAACU,MAAM,CAAE8B,CAAC,IAAKA,CAAC,CAACE,UAAU,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;KAC1F,MAAM,IAAI,IAAI,CAACH,cAAc,KAAK,MAAM,IAAI,IAAI,CAACA,cAAc,KAAK,EAAE,EAAE;MACvEzC,QAAQ,GAAGA,QAAQ,CAACU,MAAM,CAAE8B,CAAC,IAAKA,CAAC,CAACE,UAAU,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;KAC9F,MAAM,IAAI,IAAI,CAACH,cAAc,KAAK,OAAO,EAAE;MAC1CzC,QAAQ,GAAGA,QAAQ,CAACU,MAAM,CAAE8B,CAAC,IAAKA,CAAC,CAACE,UAAU,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;;IAGhG,IAAI,IAAI,CAACC,MAAM,KAAK,OAAO,IAAI,IAAI,CAACA,MAAM,IAAI,EAAE,EAAE;MAChD7C,QAAQ,GAAGA,QAAQ,CAAC8C,IAAI,CAAC,CAACjC,CAAC,EAAEkC,CAAC,KAAKA,CAAC,CAACnB,SAAS,GAAGf,CAAC,CAACe,SAAS,CAAC;KAC9D,MAAM,IAAI,IAAI,CAACiB,MAAM,IAAI,QAAQ,EAAE;MAClC7C,QAAQ,GAAGA,QAAQ,CAAC8C,IAAI,CAAC,CAACjC,CAAC,EAAEkC,CAAC,KAAKA,CAAC,CAACC,EAAE,GAAGnC,CAAC,CAACmC,EAAE,CAAC;KAChD,MAAM,IAAI,IAAI,CAACH,MAAM,IAAI,UAAU,EAAE;MACpC7C,QAAQ,GAAGA,QAAQ,CAAC8C,IAAI,CAAC,CAACjC,CAAC,EAAEkC,CAAC,KAAKA,CAAC,CAACE,YAAY,GAAGpC,CAAC,CAACoC,YAAY,CAAC;;IAGrE,OAAOjD,QAAQ;EACjB;EAEAkD,aAAa,CAAChD,OAAgB;IAC5BA,OAAO,CAACG,UAAU,GAAG,CAACH,OAAO,CAACG,UAAU;IAExC,IAAIH,OAAO,CAACG,UAAU,EAAE;MACtB,IAAI,CAACV,cAAc,CAACwD,qBAAqB,CAACjD,OAAO,CAACoB,EAAE,CAAC,CAACvB,SAAS,CAAEO,QAAQ,IAAI;QAC3EJ,OAAO,CAACI,QAAQ,GAAGA,QAAQ;MAC7B,CAAC,CAAC;;EAEN;EAEA8C,UAAU,CAAClD,OAAgB;IACzBA,OAAO,CAACC,UAAU,CAACkB,SAAS,GAAGnB,OAAO,CAACoB,EAAE;IACzCpB,OAAO,CAACC,UAAU,CAACuB,MAAM,GAAG,IAAI,CAACR,EAAE,CAACI,EAAE;IAEtC,IAAI,CAAC3B,cAAc,CAACQ,UAAU,CAACD,OAAO,CAACC,UAAU,CAAC,CAACJ,SAAS,CAAEsD,OAAO,IAAI;MACvEnD,OAAO,CAACI,QAAQ,CAACE,IAAI,CAAC6C,OAAO,CAAC;MAC9BnD,OAAO,CAAC+C,YAAY,EAAE;MACtB/C,OAAO,CAACC,UAAU,CAACC,IAAI,GAAG,EAAE;IAC9B,CAAC,CAAC;EACJ;CACD;AArHYd,YAAY,eA9ExBD,SAAS,CAAC;EACTiE,QAAQ,EAAE,SAAS;EACnBC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAyEH;EACPC,MAAM,EAAE;CACT,CAAC,GACWlE,YAAY,CAqHxB;SArHYA,YAAY","names":["Component","TopComponent","constructor","writeupService","location","voteService","commentService","userService","ngOnInit","getWriteups","subscribe","writeups","forEach","writeup","newComment","body","isExpanded","comments","categories","push","challengeCategory","filter","v","i","a","indexOf","getVotes","votes","getMe","me","hasVoted","find","writeupID","id","getVote","addVote","vote","userID","newVote","voteCount","removeVote","console","log","deleteVote","_","getDomain","u","URL","hostname","filteredWriteups","categoryFilter","w","durationFilter","ctfEndDate","Date","now","sortBy","sort","b","ts","commentCount","toggleWriteup","getCommentsForWriteup","addComment","comment","selector","template","styles"],"sourceRoot":"","sources":["/Users/c0nrad/Projects/ctfwriteups.org/fe/src/app/pages/top/top.component.ts"],"sourcesContent":["import { Location } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { CommentService, Comment } from \"src/app/services/comment.service\";\nimport { User, UserService } from \"src/app/services/user.service\";\nimport { Vote, VoteService } from \"src/app/services/vote.service\";\nimport { Writeup, WriteupService } from \"src/app/services/writeup.service\";\n\n@Component({\n  selector: \"app-top\",\n  template: ` <div style=\"padding-top: 65px\" class=\"container\">\n    <div class=\"input-group mb-3\">\n      <select class=\"form-select\" [(ngModel)]=\"sortBy\">\n        <option value=\"votes\">Votes</option>\n        <option value=\"newest\">Newest</option>\n        <option value=\"comments\">Comments</option>\n      </select>\n\n      <select class=\"form-select\" [(ngModel)]=\"categoryFilter\">\n        <option value=\"\">All Categories</option>\n        <option *ngFor=\"let category of categories\" [value]=\"category\">{{ category }}</option>\n      </select>\n\n      <select class=\"form-select float-end\" [(ngModel)]=\"durationFilter\">\n        <option value=\"day\">Day</option>\n        <option value=\"week\">Week</option>\n        <option value=\"month\">Month</option>\n        <option value=\"all\">All Time</option>\n      </select>\n    </div>\n\n    <div class=\"clearfix\"></div>\n    <div *ngFor=\"let writeup of filteredWriteups()\" class=\"card\">\n      <div class=\"card-body py-1\">\n        <div class=\"row\">\n          <div class=\"col-1\">\n            <i *ngIf=\"!hasVoted(writeup)\" (click)=\"addVote(writeup)\" class=\"bi bi-heart\" style=\"font-size:1.2rem;  vertical-align: 0em;\"></i>\n            <i *ngIf=\"hasVoted(writeup)\" (click)=\"removeVote(getVote(writeup)!, writeup)\" class=\"bi bi-heart-fill text-danger\" style=\"font-size: 1.2rem\"></i>\n\n            {{ writeup.voteCount }}\n          </div>\n\n          <div class=\"col-11\">\n            <div class=\"row pb-0\">\n              <div class=\"col-2\">\n                <a [routerLink]=\"['/ctfs', writeup.ctfID, 'edit']\"> {{ writeup.ctfName }}</a>\n              </div>\n\n              <div class=\"col-9\">\n                \n                  {{ writeup.challengeCategory }} / {{ writeup.challengeName }} <span style=\"padding-left: 5px\">(<a href=\"{{writeup.url}}\" rel=\"noopener noreferrer\" target=\"_blank\">{{ writeup.url }}</a>)</span></a\n                >\n              </div>\n\n              <div class=\"col-1\" (click)=\"toggleWriteup(writeup)\"><i class=\"bi bi-chat me-1\"></i>{{ writeup.commentCount || 0 }}</div>\n            </div>\n            <div class=\"row pb-0\">\n              <div class=\"col-2\">\n                <!-- <p>{{ writeup.body }}</p> -->\n                <p>{{ writeup.ts | dateAgo }}</p>\n              </div>\n              <div class=\"col-10\">\n                <span *ngFor=\"let tag of writeup.tags\" class=\"badge bg-secondary me-1\">{{ tag }}</span>\n                <i *ngIf=\"me.isAdmin || writeup.submitterID == me.id\" class=\"bi bi-pencil text-muted\" [routerLink]=\"['/writeups', writeup.id, 'edit']\"></i>\n              </div>\n            </div>\n\n            <div *ngIf=\"writeup.isExpanded\">\n              <div *ngFor=\"let comment of writeup.comments\">\n                <hr />\n                <p class=\"text-muted\">{{ comment.username || \"Anonymous\" }} - {{ comment.ts | dateAgo }}</p>\n                <p>{{ comment.body }}</p>\n              </div>\n\n              <div *ngIf=\"me.id\">\n                <textarea [(ngModel)]=\"writeup.newComment.body\" class=\"form-control\"></textarea>\n                <button (click)=\"addComment(writeup)\" class=\"btn btn-primary\">Add Comment</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>`,\n  styles: [],\n})\nexport class TopComponent {\n  me: User = {} as User;\n  writeups: Writeup[] = [];\n  votes: Vote[] = [];\n\n  sortBy = \"votes\";\n  durationFilter = \"week\";\n  categoryFilter = \"\";\n\n  categories: string[] = [];\n\n  constructor(private writeupService: WriteupService, private location: Location, private voteService: VoteService, private commentService: CommentService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.writeupService.getWriteups().subscribe((writeups) => {\n      this.writeups = writeups || [];\n\n      this.writeups.forEach((writeup) => {\n        writeup.newComment = {} as Comment;\n        writeup.newComment.body = \"\";\n        writeup.isExpanded = false;\n        writeup.comments = writeup.comments || [];\n\n        this.categories.push(writeup.challengeCategory);\n      });\n\n      this.categories = this.categories.filter((v, i, a) => a.indexOf(v) === i);\n    });\n\n    this.voteService.getVotes().subscribe((votes) => {\n      this.votes = votes || [];\n    });\n\n    this.userService.getMe().subscribe((me) => {\n      this.me = me;\n    });\n  }\n\n  hasVoted(writeup: Writeup): boolean {\n    if (!this.votes) {\n    }\n    return !!this.votes.find((v) => v.writeupID === writeup.id);\n  }\n\n  getVote(writeup: Writeup): Vote | undefined {\n    return this.votes.find((v) => v.writeupID === writeup.id);\n  }\n\n  addVote(writeup: Writeup): void {\n    const vote: Vote = {\n      writeupID: writeup.id,\n      userID: this.me.id,\n    } as Vote;\n\n    this.voteService.newVote(vote).subscribe((v) => {\n      this.votes.push(v);\n      writeup.voteCount++;\n    });\n  }\n\n  removeVote(vote: Vote, writeup: Writeup): void {\n    console.log(\"remove vote\", vote);\n    this.voteService.deleteVote(vote).subscribe((_) => {\n      this.votes = this.votes.filter((v) => vote.id !== v.id);\n      writeup.voteCount--;\n    });\n  }\n\n  getDomain(u: string): string {\n    return new URL(u).hostname;\n  }\n\n  filteredWriteups(): Writeup[] {\n    let writeups = this.writeups;\n    if (this.categoryFilter) {\n      writeups = writeups.filter((w) => w.challengeCategory === this.categoryFilter);\n    }\n\n    if (this.durationFilter === \"day\") {\n      writeups = writeups.filter((w) => w.ctfEndDate * 1000 > Date.now() - 1000 * 60 * 60 * 24);\n    } else if (this.durationFilter === \"week\" || this.durationFilter === \"\") {\n      writeups = writeups.filter((w) => w.ctfEndDate * 1000 > Date.now() - 1000 * 60 * 60 * 24 * 7);\n    } else if (this.durationFilter === \"month\") {\n      writeups = writeups.filter((w) => w.ctfEndDate * 1000 > Date.now() - 1000 * 60 * 60 * 24 * 30);\n    }\n\n    if (this.sortBy === \"votes\" || this.sortBy == \"\") {\n      writeups = writeups.sort((a, b) => b.voteCount - a.voteCount);\n    } else if (this.sortBy == \"newest\") {\n      writeups = writeups.sort((a, b) => b.ts - a.ts);\n    } else if (this.sortBy == \"comments\") {\n      writeups = writeups.sort((a, b) => b.commentCount - a.commentCount);\n    }\n\n    return writeups;\n  }\n\n  toggleWriteup(writeup: Writeup): void {\n    writeup.isExpanded = !writeup.isExpanded;\n\n    if (writeup.isExpanded) {\n      this.commentService.getCommentsForWriteup(writeup.id).subscribe((comments) => {\n        writeup.comments = comments;\n      });\n    }\n  }\n\n  addComment(writeup: Writeup): void {\n    writeup.newComment.writeupID = writeup.id;\n    writeup.newComment.userID = this.me.id;\n\n    this.commentService.newComment(writeup.newComment).subscribe((comment) => {\n      writeup.comments.push(comment);\n      writeup.commentCount++;\n      writeup.newComment.body = \"\";\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}